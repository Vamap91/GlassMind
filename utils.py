import streamlit as st
from openai import OpenAI
import yagmail
import json
import re
from datetime import datetime
import hashlib

# üîë Conectando ao OpenAI com modelo mais avan√ßado
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

def validar_entrada(nome, ideia):
    """Valida as entradas do usu√°rio"""
    if not nome or len(nome.strip()) < 2:
        return {"valido": False, "erro": "Nome deve ter pelo menos 2 caracteres"}
    
    if not ideia or len(ideia.strip()) < 10:
        return {"valido": False, "erro": "Ideia deve ter pelo menos 10 caracteres"}
    
    if len(ideia.strip()) > 2000:
        return {"valido": False, "erro": "Ideia muito longa (m√°ximo 2000 caracteres)"}
    
    # Verifica caracteres especiais maliciosos
    if re.search(r'[<>{}[\]\\]', ideia):
        return {"valido": False, "erro": "Caracteres especiais n√£o permitidos"}
    
    return {"valido": True, "erro": None}

def estruturar_ideia_avancada(dados, preview_mode=False):
    """Gera proposta estruturada usando GPT-4 com prompt avan√ßado"""
    
    nome = dados["nome"]
    area = dados["area"]
    ideia = dados["ideia"]
    nivel = dados["nivel"]
    foco = dados["foco"]
    problema = dados.get("problema", "")
    recursos = dados.get("recursos", "")
    prazo = dados.get("prazo", "")
    
    # Prompt inteligente baseado no n√≠vel
    if preview_mode:
        prompt = f"""
        CONTEXTO: Voc√™ √© um consultor s√™nior da Carglass especializado em estrutura√ß√£o de projetos.
        
        TAREFA: Gere um PREVIEW executivo da ideia do colaborador {nome} da √°rea {area}.
        
        IDEIA: "{ideia}"
        FOCO: {foco}
        {f"PROBLEMA A RESOLVER: {problema}" if problema else ""}
        
        FORMATO DE SA√çDA (PREVIEW):
        ## üéØ **Resumo Executivo**
        [Descri√ß√£o clara em 2-3 linhas]
        
        ## üí° **Valor Agregado**
        [Principal benef√≠cio em 1 linha]
        
        ## ‚ö° **Implementa√ß√£o**
        [Abordagem simplificada em 2-3 pontos]
        
        Mantenha conciso e focado. Este √© apenas um preview.
        """
    else:
        prompt = f"""
        CONTEXTO: Voc√™ √© um consultor s√™nior da Carglass especializado em estrutura√ß√£o de projetos de inova√ß√£o.
        
        MISS√ÉO: Transformar a ideia do colaborador {nome} ({area}) em uma proposta COMPLETA e EXECUT√ÅVEL.
        
        ENTRADA:
        - **Ideia:** "{ideia}"
        - **Foco:** {foco}
        - **N√≠vel:** {nivel}
        {f"- **Problema atual:** {problema}" if problema else ""}
        {f"- **Recursos dispon√≠veis:** {recursos}" if recursos else ""}
        {f"- **Prazo desejado:** {prazo}" if prazo else ""}
        
        FORMATO DE SA√çDA OBRIGAT√ìRIO:
        
        # üéØ **PROPOSTA: [Nome do Projeto]**
        
        ## üìã **1. RESUMO EXECUTIVO**
        [Descri√ß√£o clara e objetiva em 3-4 linhas sobre o que √© o projeto]
        
        ## üéØ **2. PROBLEMA & OPORTUNIDADE**
        - **Problema identificado:** [Descreva o problema]
        - **Oportunidade:** [Qual oportunidade isso representa]
        - **Impacto esperado:** [Benef√≠cios quantific√°veis]
        
        ## üèóÔ∏è **3. ESTRUTURA T√âCNICA SUGERIDA**
        ### **Tecnologias Recomendadas:**
        - **Frontend:** [Tecnologia sugerida]
        - **Backend:** [Tecnologia sugerida]
        - **Banco de Dados:** [Tecnologia sugerida]
        - **Infraestrutura:** [Cloud/On-premise]
        
        ### **Arquitetura Simplificada:**
        ```
        [Diagrama textual da arquitetura]
        ```
        
        ## üìÇ **4. ESTRUTURA DE DESENVOLVIMENTO**
        ### **Organiza√ß√£o do Reposit√≥rio:**
        ```
        projeto-nome/
        ‚îú‚îÄ‚îÄ README.md
        ‚îú‚îÄ‚îÄ requirements.txt
        ‚îú‚îÄ‚îÄ app/
        ‚îÇ   ‚îú‚îÄ‚îÄ main.py
        ‚îÇ   ‚îú‚îÄ‚îÄ models/
        ‚îÇ   ‚îú‚îÄ‚îÄ views/
        ‚îÇ   ‚îî‚îÄ‚îÄ utils/
        ‚îú‚îÄ‚îÄ tests/
        ‚îú‚îÄ‚îÄ docs/
        ‚îî‚îÄ‚îÄ deploy/
        ```
        
        ### **Metodologia Sugerida:**
        - **Framework:** [Scrum/Kanban]
        - **Sprints:** [Dura√ß√£o sugerida]
        - **Ferramentas:** [GitHub, Jira, etc.]
        
        ## üìÖ **5. CRONOGRAMA DETALHADO**
        ### **Fase 1: Planejamento (Semana 1-2)**
        - [ ] Defini√ß√£o de requisitos
        - [ ] Prototipagem
        - [ ] Valida√ß√£o com stakeholders
        
        ### **Fase 2: Desenvolvimento (Semana 3-8)**
        - [ ] Setup do ambiente
        - [ ] Desenvolvimento core
        - [ ] Testes unit√°rios
        - [ ] Integra√ß√£o
        
        ### **Fase 3: Deploy e Valida√ß√£o (Semana 9-10)**
        - [ ] Deploy em ambiente de teste
        - [ ] Testes de usu√°rio
        - [ ] Corre√ß√µes e melhorias
        - [ ] Go-live
        
        ## üéØ **6. M√âTRICAS DE SUCESSO**
        - **KPI Principal:** [M√©trica principal]
        - **KPIs Secund√°rios:** [Outras m√©tricas]
        - **M√©todos de Medi√ß√£o:** [Como medir]
        
        ## üí∞ **7. AN√ÅLISE DE VIABILIDADE**
        ### **Investimento Estimado:**
        - **Desenvolvimento:** [Estimativa de horas/valor]
        - **Infraestrutura:** [Custos mensais]
        - **Manuten√ß√£o:** [Custos recorrentes]
        
        ### **ROI Projetado:**
        - **Economia esperada:** [Valor]
        - **Payback:** [Tempo]
        
        ## ‚ö†Ô∏è **8. RISCOS & MITIGA√á√ïES**
        - **Risco 1:** [Descri√ß√£o] ‚Üí **Mitiga√ß√£o:** [Como resolver]
        - **Risco 2:** [Descri√ß√£o] ‚Üí **Mitiga√ß√£o:** [Como resolver]
        
        ## üöÄ **9. PR√ìXIMOS PASSOS IMEDIATOS**
        1. **Aprova√ß√£o da proposta** (Respons√°vel: Lideran√ßa)
        2. **Forma√ß√£o do time** (Respons√°vel: RH/TI)
        3. **Refinamento de requisitos** (Respons√°vel: {nome})
        4. **Kick-off do projeto** (Prazo: 2 semanas)
        
        ## üë• **10. EQUIPE SUGERIDA**
        - **Product Owner:** [Perfil]
        - **Desenvolvedores:** [Quantidade e perfil]
        - **Designer:** [Se necess√°rio]
        - **DevOps:** [Se necess√°rio]
        
        ---
        
        **Proposta gerada por:** MindGlass V2 | **Autor da ideia:** {nome} | **Data:** {datetime.now().strftime("%d/%m/%Y")}
        """
    
    try:
        resposta = client.chat.completions.create(
            model="gpt-4-turbo-preview",  # Modelo mais avan√ßado
            messages=[
                {
                    "role": "system", 
                    "content": "Voc√™ √© um consultor s√™nior especializado em estrutura√ß√£o de projetos de inova√ß√£o para empresas. Seja preciso, pr√°tico e focado em resultados execut√°veis."
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            temperature=0.3,  # Mais determin√≠stico
            max_tokens=2500 if not preview_mode else 800,
        )
        
        return resposta.choices[0].message.content.strip()
        
    except Exception as e:
        return f"Erro ao processar com IA: {str(e)}"

def gerar_json_proposta(dados, proposta):
    """Gera JSON estruturado com todos os dados da proposta"""
    try:
        # Gera ID √∫nico para a proposta
        proposta_id = hashlib.md5(f"{dados['nome']}{dados['ideia']}{datetime.now()}".encode()).hexdigest()[:8]
        timestamp = datetime.now()
        
        # Extrai informa√ß√µes estruturadas da proposta (parsing b√°sico)
        proposta_estruturada = extrair_estrutura_proposta(proposta)
        
        json_proposta = {
            "metadata": {
                "id": proposta_id,
                "versao": "2.0",
                "timestamp": timestamp.isoformat(),
                "data_criacao": timestamp.strftime("%d/%m/%Y %H:%M:%S"),
                "sistema": "MindGlass V2",
                "status": "processado"
            },
            "autor": {
                "nome": dados["nome"],
                "area": dados["area"],
                "area_detalhada": dados.get("area", "").split(" - ")[0] if " - " in dados.get("area", "") else dados.get("area", "")
            },
            "entrada": {
                "ideia_original": dados["ideia"],
                "nivel_detalhamento": dados.get("nivel", "Intermedi√°rio"),
                "foco_principal": dados.get("foco", "N√£o especificado"),
                "problema_contexto": dados.get("problema", ""),
                "recursos_disponiveis": dados.get("recursos", ""),
                "prazo_desejado": dados.get("prazo", ""),
                "caracteres_ideia": len(dados["ideia"].strip()),
                "palavras_chave": extrair_palavras_chave(dados["ideia"])
            },
            "saida": {
                "proposta_completa": proposta,
                "resumo_executivo": proposta_estruturada.get("resumo", ""),
                "tecnologias_sugeridas": proposta_estruturada.get("tecnologias", []),
                "cronograma_estimado": proposta_estruturada.get("cronograma", ""),
                "investimento_estimado": proposta_estruturada.get("investimento", ""),
                "riscos_identificados": proposta_estruturada.get("riscos", []),
                "metricas_sucesso": proposta_estruturada.get("metricas", [])
            },
            "analise": {
                "complexidade": avaliar_complexidade(dados["ideia"]),
                "categoria_projeto": classificar_projeto(dados["ideia"], dados.get("foco", "")),
                "viabilidade_tecnica": "Alta",  # Poderia ser calculada
                "impacto_estimado": calcular_impacto(dados.get("foco", "")),
                "prioridade_sugerida": sugerir_prioridade(dados)
            },
            "proximos_passos": {
                "acao_imediata": "An√°lise pela lideran√ßa",
                "responsavel_proximo": "Lideran√ßa da √°rea",
                "prazo_resposta": "5 dias √∫teis",
                "etapas_aprovacao": [
                    "Revis√£o t√©cnica",
                    "Valida√ß√£o de recursos",
                    "Aprova√ß√£o or√ßament√°ria",
                    "Forma√ß√£o de equipe"
                ]
            },
            "integracoes": {
                "pode_integrar_sistemas_existentes": True,
                "sistemas_relacionados": identificar_sistemas_relacionados(dados["area"]),
                "apis_necessarias": [],
                "dependencias_externas": []
            }
        }
        
        return json_proposta
        
    except Exception as e:
        st.error(f"Erro ao gerar JSON: {str(e)}")
        return None

def extrair_estrutura_proposta(proposta):
    """Extrai informa√ß√µes estruturadas da proposta gerada pela IA"""
    estrutura = {
        "resumo": "",
        "tecnologias": [],
        "cronograma": "",
        "investimento": "",
        "riscos": [],
        "metricas": []
    }
    
    try:
        linhas = proposta.split('\n')
        secao_atual = ""
        
        for linha in linhas:
            linha_clean = linha.strip()
            
            # Identifica se√ß√µes
            if "RESUMO EXECUTIVO" in linha_clean.upper():
                secao_atual = "resumo"
            elif "TECNOLOGIAS RECOMENDADAS" in linha_clean.upper():
                secao_atual = "tecnologias"
            elif "CRONOGRAMA" in linha_clean.upper():
                secao_atual = "cronograma"
            elif "INVESTIMENTO" in linha_clean.upper():
                secao_atual = "investimento"
            elif "RISCOS" in linha_clean.upper():
                secao_atual = "riscos"
            elif "M√âTRICAS" in linha_clean.upper():
                secao_atual = "metricas"
            
            # Extrai conte√∫do baseado na se√ß√£o
            elif secao_atual == "resumo" and linha_clean and not linha_clean.startswith('#'):
                if estrutura["resumo"]:
                    estrutura["resumo"] += " " + linha_clean
                else:
                    estrutura["resumo"] = linha_clean
            
            elif secao_atual == "tecnologias" and "**" in linha_clean:
                tech = linha_clean.replace("*", "").replace("-", "").strip()
                if tech:
                    estrutura["tecnologias"].append(tech)
                    
    except Exception:
        pass  # Se falhar, retorna estrutura vazia
    
    return estrutura

def extrair_palavras_chave(texto):
    """Extrai palavras-chave da ideia"""
    # Lista de palavras comuns para filtrar
    stop_words = {'o', 'a', 'os', 'as', 'um', 'uma', 'uns', 'umas', 'de', 'da', 'do', 'das', 'dos', 
                  'para', 'por', 'com', 'em', 'na', 'no', 'nas', 'nos', 'que', 'se', '√©', 's√£o', 
                  'ter', 'tem', 'foi', 'ser', 'estar', 'esse', 'essa', 'isso', 'isso', 'como', 'mais'}
    
    palavras = re.findall(r'\b\w+\b', texto.lower())
    palavras_filtradas = [p for p in palavras if len(p) > 3 and p not in stop_words]
    
    # Retorna as 5 palavras mais frequentes (simula√ß√£o)
    return list(set(palavras_filtradas))[:5]

def avaliar_complexidade(ideia):
    """Avalia complexidade baseada em palavras-chave"""
    palavras_alta_complexidade = ['integra√ß√£o', 'machine learning', 'ia', 'blockchain', 'microservi√ßos', 'big data']
    palavras_media_complexidade = ['automa√ß√£o', 'dashboard', 'relat√≥rio', 'api', 'mobile']
    
    ideia_lower = ideia.lower()
    
    if any(palavra in ideia_lower for palavra in palavras_alta_complexidade):
        return "Alta"
    elif any(palavra in ideia_lower for palavra in palavras_media_complexidade):
        return "M√©dia"
    else:
        return "Baixa"

def classificar_projeto(ideia, foco):
    """Classifica o tipo de projeto"""
    categorias = {
        "Automa√ß√£o": ["automa√ß√£o", "automatizar", "rob√¥", "bot"],
        "Dashboard/BI": ["dashboard", "relat√≥rio", "an√°lise", "dados", "m√©tricas"],
        "Mobile": ["app", "mobile", "celular", "smartphone"],
        "Integra√ß√£o": ["integrar", "conectar", "sincronizar", "api"],
        "UX/Interface": ["interface", "experi√™ncia", "usu√°rio", "design"],
        "Processo": ["processo", "workflow", "fluxo", "otimizar"]
    }
    
    ideia_lower = ideia.lower()
    for categoria, palavras in categorias.items():
        if any(palavra in ideia_lower for palavra in palavras):
            return categoria
    
    return foco if foco != "N√£o especificado" else "Geral"

def calcular_impacto(foco):
    """Calcula impacto estimado baseado no foco"""
    impactos = {
        "Redu√ß√£o de Custos": "Alto",
        "Experi√™ncia do Cliente": "Alto", 
        "Automa√ß√£o": "M√©dio",
        "Melhoria de Processo": "M√©dio",
        "Nova Tecnologia": "Baixo",
        "Inova√ß√£o": "Baixo"
    }
    return impactos.get(foco, "M√©dio")

def sugerir_prioridade(dados):
    """Sugere prioridade baseada em m√∫ltiplos fatores"""
    pontos = 0
    
    # Baseado no foco
    if dados.get("foco") in ["Redu√ß√£o de Custos", "Experi√™ncia do Cliente"]:
        pontos += 3
    elif dados.get("foco") in ["Automa√ß√£o", "Melhoria de Processo"]:
        pontos += 2
    else:
        pontos += 1
    
    # Baseado no prazo
    if dados.get("prazo") == "Urgente (1 m√™s)":
        pontos += 3
    elif dados.get("prazo") == "Curto (3 meses)":
        pontos += 2
    
    # Baseado na √°rea
    if dados.get("area", "").startswith("TI"):
        pontos += 1
    
    if pontos >= 5:
        return "Alta"
    elif pontos >= 3:
        return "M√©dia"
    else:
        return "Baixa"

def identificar_sistemas_relacionados(area):
    """Identifica sistemas que podem estar relacionados baseado na √°rea"""
    sistemas_por_area = {
        "TI": ["Sistema ERP", "Active Directory", "Monitoramento"],
        "RH": ["Sistema RH", "Portal do Colaborador", "Avalia√ß√£o"],
        "Financeiro": ["ERP Financeiro", "BI Financeiro", "Contas a Pagar"],
        "Atendimento": ["CRM", "Sistema de Tickets", "Chat"],
        "Loja": ["PDV", "Estoque", "CRM Loja"],
        "Oficina": ["Sistema Oficina", "Ordens de Servi√ßo", "Estoque Pe√ßas"],
        "Marketing": ["CRM Marketing", "Analytics", "Email Marketing"]
    }
    
    area_base = area.split(" - ")[0] if " - " in area else area
    return sistemas_por_area.get(area_base, ["Sistema Geral"])

def salvar_json_proposta(json_proposta):
    """Salva o JSON da proposta"""
    try:
        # Em ambiente real, salvaria em banco de dados ou storage
        # Por enquanto, apenas mostra no Streamlit
        
        json_formatado = json.dumps(json_proposta, indent=2, ensure_ascii=False)
        
        # Mostra no Streamlit para debug/visualiza√ß√£o
        with st.expander("üìÑ JSON Gerado (Clique para visualizar)"):
            st.code(json_formatado, language="json")
        
        # Aqui voc√™ poderia salvar em arquivo, banco de dados, etc.
        # Exemplo de salvamento em arquivo:
        # with open(f"propostas/proposta_{json_proposta['metadata']['id']}.json", "w", encoding="utf-8") as f:
        #     json.dump(json_proposta, f, indent=2, ensure_ascii=False)
        
        return json_proposta['metadata']['id']
        
    except Exception as e:
        st.error(f"Erro ao salvar JSON: {str(e)}")
        return None

def enviar_email_estruturado(dados, proposta, json_proposta=None):
    """Envia email com estrutura completa ensinando l√≥gica de cria√ß√£o"""
    
    nome = dados["nome"]
    area = dados["area"]
    
    # Assunto mais descritivo
    assunto = f"üöÄ NOVA PROPOSTA ESTRUTURADA - {nome} ({area}) | MindGlass V2"
    
    # Adiciona informa√ß√µes do JSON se dispon√≠vel
    json_info = ""
    if json_proposta:
        json_info = f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä DADOS ESTRUTURADOS (JSON):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üÜî ID da Proposta: {json_proposta['metadata']['id']}
üìà Complexidade: {json_proposta['analise']['complexidade']}
üéØ Categoria: {json_proposta['analise']['categoria_projeto']}
‚ö° Prioridade: {json_proposta['analise']['prioridade_sugerida']}
üí∞ Impacto: {json_proposta['analise']['impacto_estimado']}

üîó JSON Completo: Arquivo anexo ou sistema interno
"""
    
    # Corpo do email ensinando a l√≥gica
    corpo_email = f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ PROPOSTA ESTRUTURADA - MINDGLASS V2
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã METADADOS DO PROJETO:
‚Ä¢ Autor: {nome}
‚Ä¢ √Årea: {area}
‚Ä¢ Data: {datetime.now().strftime("%d/%m/%Y √†s %H:%M")}
‚Ä¢ N√≠vel: {dados.get('nivel', 'Intermedi√°rio')}
‚Ä¢ Foco: {dados.get('foco', 'N√£o especificado')}
{json_info}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìù IDEIA ORIGINAL (INPUT):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"{dados['ideia']}"

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üß† PROPOSTA ESTRUTURADA (OUTPUT IA):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{proposta}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéì L√ìGICA DE ESTRUTURA√á√ÉO DE PROJETOS - APRENDA CONOSCO!
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Este email foi gerado automaticamente seguindo nossa metodologia
de estrutura√ß√£o de projetos de inova√ß√£o. Veja como funciona:

üîÑ **PROCESSO DE TRANSFORMA√á√ÉO:**

1. **CAPTURA INTELIGENTE**
   ‚úì Coletamos ideia simples do colaborador
   ‚úì Validamos entrada e contexto
   ‚úì Enriquecemos com dados adicionais

2. **PROCESSAMENTO IA**
   ‚úì Usamos GPT-4 Turbo para an√°lise avan√ßada
   ‚úì Aplicamos templates de estrutura√ß√£o
   ‚úì Geramos proposta execut√°vel

3. **ESTRUTURA√á√ÉO JSON**
   ‚úì Convertemos para formato estruturado
   ‚úì Adicionamos metadados e an√°lises
   ‚úì Categorizamos e priorizamos automaticamente

4. **ENTREGA ESTRUTURADA**
   ‚úì Formato padr√£o para todas as propostas
   ‚úì Cronograma detalhado
   ‚úì An√°lise de viabilidade t√©cnica
   ‚úì M√©tricas de sucesso definidas

üèóÔ∏è **ESTRUTURA PADR√ÉO DE PROJETOS CARGLASS:**

üìã Resumo Executivo
üéØ Problema & Oportunidade  
üèóÔ∏è Estrutura T√©cnica
üìÇ Organiza√ß√£o do Desenvolvimento
üìÖ Cronograma Detalhado
üéØ M√©tricas de Sucesso
üí∞ An√°lise de Viabilidade
‚ö†Ô∏è Riscos & Mitiga√ß√µes
üöÄ Pr√≥ximos Passos
üë• Equipe Sugerida

üí° **METODOLOGIA APLICADA:**
‚Ä¢ Design Thinking para entender o problema
‚Ä¢ Lean Startup para valida√ß√£o r√°pida
‚Ä¢ Scrum para execu√ß√£o √°gil
‚Ä¢ DevOps para entrega cont√≠nua

üîß **STACK TECNOL√ìGICO PADR√ÉO:**
‚Ä¢ Frontend: React/Vue.js
‚Ä¢ Backend: Python/Node.js
‚Ä¢ Database: PostgreSQL/MongoDB
‚Ä¢ Cloud: AWS/Azure
‚Ä¢ CI/CD: GitHub Actions
‚Ä¢ Monitoramento: DataDog/New Relic

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä PR√ìXIMAS A√á√ïES RECOMENDADAS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. **AN√ÅLISE INICIAL** (Lideran√ßa - 2 dias)
   ‚Ä¢ Revisar proposta estruturada
   ‚Ä¢ Validar alinhamento estrat√©gico
   ‚Ä¢ Decidir sobre continuidade

2. **REFINAMENTO** (Product Owner - 1 semana)
   ‚Ä¢ Detalhar requisitos espec√≠ficos
   ‚Ä¢ Validar premissas t√©cnicas
   ‚Ä¢ Definir crit√©rios de aceite

3. **APROVA√á√ÉO** (Comit√™ - 1 semana)
   ‚Ä¢ Apresentar business case
   ‚Ä¢ Aprovar or√ßamento
   ‚Ä¢ Definir timeline

4. **KICK-OFF** (Time - 2 semanas)
   ‚Ä¢ Formar equipe
   ‚Ä¢ Setup do ambiente
   ‚Ä¢ Iniciar desenvolvimento

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ M√âTRICAS DE ACOMPANHAMENTO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Para garantir o sucesso, sugerimos acompanhar:

üìà **M√©tricas de Produto:**
‚Ä¢ Taxa de ado√ß√£o pelos usu√°rios
‚Ä¢ Tempo de execu√ß√£o de tarefas
‚Ä¢ Satisfa√ß√£o do cliente (NPS)
‚Ä¢ Redu√ß√£o de erros/retrabalho

üìä **M√©tricas de Projeto:**
‚Ä¢ Velocity da equipe
‚Ä¢ Burn-down das sprints
‚Ä¢ Qualidade do c√≥digo (coverage)
‚Ä¢ Tempo de deploy

üí∞ **M√©tricas de Neg√≥cio:**
‚Ä¢ ROI do projeto
‚Ä¢ Redu√ß√£o de custos
‚Ä¢ Aumento de receita
‚Ä¢ Efici√™ncia operacional

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
ü§ù COMO RESPONDER A ESTA PROPOSTA:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚úÖ **SE APROVAR:**
‚Ä¢ Responda com "APROVADO" + pr√≥ximos passos
‚Ä¢ Defina sponsor do projeto
‚Ä¢ Aloque recursos necess√°rios

üîÑ **SE PRECISAR DE AJUSTES:**
‚Ä¢ Especifique mudan√ßas necess√°rias
‚Ä¢ Solicite nova vers√£o via MindGlass
‚Ä¢ Mantenha {nome} no loop

‚ùå **SE REJEITAR:**
‚Ä¢ Explique motivos da rejei√ß√£o
‚Ä¢ Sugira melhorias para pr√≥ximas ideias
‚Ä¢ Reconhe√ßa o esfor√ßo do colaborador

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Este email foi gerado automaticamente pelo MindGlass V2
Desenvolvido por Vin√≠cius Augusto | Carglass Innovation Lab

üí° Quer saber mais sobre nossa metodologia? 
üìß Entre em contato conosco!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
    
    # Envio do email
    try:
        yag = yagmail.SMTP(st.secrets["EMAIL_USER"], st.secrets["EMAIL_PASS"])
        yag.send(
            to=st.secrets["EMAIL_DESTINO"],
            subject=assunto,
            contents=corpo_email
        )
    except Exception as e:
        raise Exception(f"Erro ao enviar email: {str(e)}")

def salvar_historico(dados, proposta):
    """Salva hist√≥rico da proposta"""
    try:
        # Gera JSON estruturado
        json_proposta = gerar_json_proposta(dados, proposta)
        
        if json_proposta:
            # Salva o JSON
            proposta_id = salvar_json_proposta(json_proposta)
            
            # Log de sucesso
            st.success(f"üìù Proposta {proposta_id} processada e JSON gerado!")
            
            return proposta_id, json_proposta
        else:
            return None, None
        
    except Exception as e:
        st.error(f"Erro ao salvar hist√≥rico: {str(e)}")
        return None, None
